/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ghc;

import ghc.undertow.DispatcherServlet;
import ghc.undertow.ForwardToServlet;
import ghc.undertow.IncludeMeServlet;

import io.undertow.Undertow;
import io.undertow.server.handlers.PathHandler;
import io.undertow.servlet.Servlets;
import io.undertow.servlet.api.DeploymentInfo;
import io.undertow.servlet.api.DeploymentManager;
import io.undertow.servlet.api.ServletContainer;
import jakarta.servlet.ServletException;


public class App {
    public String getGreeting() {
        return "Hello World GHC!";
    }

    public static void main(String[] args) throws ServletException {
        System.out.println(new App().getGreeting()+ "  -  STARTING UNDERTOW");
        System.out.println("curl -v localhost:8080/ghc/${PATH}");
        System.out.println("TODO (and or):");
        System.out.println("1. Switch to relative path on dispatch(in DispatcherServlet)");
        System.out.println("2. Itroduce request parameter to switch between modes(query string?)");
        System.out.println("3. Introduce Async request to self without infinite loop(request attribute?)");
        System.out.println("4. Add POST multipart handling"); //   - check MultiPartTestCase
        final PathHandler root = new PathHandler();
        final ServletContainer container = ServletContainer.Factory.newInstance();
        DeploymentInfo builder = new DeploymentInfo()
                .setClassLoader(App.class.getClassLoader())
                //Main context that will be used as root path
                .setContextPath("/ghc")
                .setDeploymentName("ghc.war")
                //Servlet definitions, contain
                .addServlets(
                        //Servlet name and class. Name must be unique
                        Servlets.servlet("DispatchForwarder", DispatcherServlet.class)
                        //path mappings that servlet will handle, with context path, 'DispatchForwarder' will handle IP/ghc/forwarder and any subpath (*)
                                .addMappings("/forwarder/*", "/forwarder")
                                 //marks servlet as supporting Asynchronous request handling
                                .setAsyncSupported(true),
                        Servlets.servlet("Forwarded_TO", ForwardToServlet.class)
                            .addMappings("/forwardTarget/*", "/forwardTarget") 
                                .setAsyncSupported(true),
                                //DispatcherServlet can handle both paths, this definition is not required, first one could simply define mappings from this one
                        Servlets.servlet("DispatchIndcluder", DispatcherServlet.class)
                             .addMappings("/includer/*", "/includer")
                                 .setAsyncSupported(true),
                        Servlets.servlet("GoingToIncludeMyOutput", IncludeMeServlet.class)
                             .addMappings("/included/*", "/included")
                                  .setAsyncSupported(true)
                );

        DeploymentManager manager = container.addDeployment(builder);
        manager.deploy();
        root.addPrefixPath(builder.getContextPath(), manager.start());
        Undertow server = Undertow.builder()
                //defintion of port and IP.
                .addHttpListener(8080, "localhost")
                .setHandler(root)
                .build();
        server.start();

    }
}
